!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Fortran	E,enum	/enumerations/
!_TAG_KIND_DESCRIPTION!Fortran	M,method	/type bound procedures/
!_TAG_KIND_DESCRIPTION!Fortran	N,enumerator	/enumeration values/
!_TAG_KIND_DESCRIPTION!Fortran	S,submodule	/submodules/
!_TAG_KIND_DESCRIPTION!Fortran	b,blockData	/block data/
!_TAG_KIND_DESCRIPTION!Fortran	c,common	/common blocks/
!_TAG_KIND_DESCRIPTION!Fortran	e,entry	/entry points/
!_TAG_KIND_DESCRIPTION!Fortran	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Fortran	i,interface	/interface contents, generic names, and operators/
!_TAG_KIND_DESCRIPTION!Fortran	k,component	/type and structure components/
!_TAG_KIND_DESCRIPTION!Fortran	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Fortran	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Fortran	n,namelist	/namelists/
!_TAG_KIND_DESCRIPTION!Fortran	p,program	/programs/
!_TAG_KIND_DESCRIPTION!Fortran	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!Fortran	t,type	/derived types and structures/
!_TAG_KIND_DESCRIPTION!Fortran	v,variable	/program (global) and module variables/
!_TAG_KIND_DESCRIPTION!SystemVerilog	A,assert	/assertions (assert, assume, cover, restrict)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	C,class	/classes/
!_TAG_KIND_DESCRIPTION!SystemVerilog	E,enum	/enumerators/
!_TAG_KIND_DESCRIPTION!SystemVerilog	H,checker	/checkers/
!_TAG_KIND_DESCRIPTION!SystemVerilog	I,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!SystemVerilog	K,package	/packages/
!_TAG_KIND_DESCRIPTION!SystemVerilog	L,clocking	/clocking/
!_TAG_KIND_DESCRIPTION!SystemVerilog	M,modport	/modports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	N,nettype	/nettype declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	O,constraint	/constraints/
!_TAG_KIND_DESCRIPTION!SystemVerilog	P,program	/programs/
!_TAG_KIND_DESCRIPTION!SystemVerilog	R,property	/properties/
!_TAG_KIND_DESCRIPTION!SystemVerilog	S,struct	/structs and unions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	T,typedef	/type declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	V,covergroup	/covergroups/
!_TAG_KIND_DESCRIPTION!SystemVerilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	c,constant	/constants (parameter, specparam, enum values)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!SystemVerilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!SystemVerilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	i,instance	/instances of module or interface/
!_TAG_KIND_DESCRIPTION!SystemVerilog	l,ifclass	/interface class/
!_TAG_KIND_DESCRIPTION!SystemVerilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!SystemVerilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	q,sequence	/sequences/
!_TAG_KIND_DESCRIPTION!SystemVerilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!SystemVerilog	w,member	/struct and union members/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Fortran	1.1	/current.age/
!_TAG_PARSER_VERSION!SystemVerilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/u/risheek/SystemVerilog/my_lab/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240922.0/
!_TAG_ROLE_DESCRIPTION!SystemVerilog!module	decl	/declaring instances/
ADD	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
DEPTH	instr_register_pkg.sv	/^  parameter DEPTH = 1024;$/;"	c	package:instr_register_pkg
DIV	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
IRW	instr_register.sv	/^  instruction_t IRW [DEPTH-1:0];$/;"	r	module:instr_register
MOD	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
MUL	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
PASSA	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
PASSB	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
SUB	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
WIDTH	instr_register_pkg.sv	/^  parameter WIDTH = $clog2(DEPTH);$/;"	c	package:instr_register_pkg
ZERO	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
clk	instr_register.sv	/^  ( input logic clk,$/;"	p	module:instr_register
index_t	instr_register_pkg.sv	/^  typedef logic [WIDTH-1:0] index_t;$/;"	T	package:instr_register_pkg
instr_register	instr_register.sv	/^module instr_register $/;"	m
instr_register_pkg	instr_register_pkg.sv	/^package instr_register_pkg;$/;"	K
instruction	instr_register.sv	/^    output instruction_t instruction$/;"	p	module:instr_register
instruction_t	instr_register_pkg.sv	/^  }instruction_t;$/;"	T	package:instr_register_pkg
load_en	instr_register.sv	/^    input logic load_en,$/;"	p	module:instr_register
op_a	instr_register_pkg.sv	/^    operand_t op_a;$/;"	w	typedef:instr_register_pkg.instruction_t
op_b	instr_register_pkg.sv	/^    operand_t op_b;$/;"	w	typedef:instr_register_pkg.instruction_t
opc	instr_register_pkg.sv	/^    opcode_t opc;$/;"	w	typedef:instr_register_pkg.instruction_t
opcode	instr_register.sv	/^    input opcode_t opcode,$/;"	p	module:instr_register
opcode_t	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	T	package:instr_register_pkg
operand_a	instr_register.sv	/^    input operand_t operand_a,$/;"	p	module:instr_register
operand_b	instr_register.sv	/^    input operand_t operand_b,$/;"	p	module:instr_register
operand_t	instr_register_pkg.sv	/^  typedef bit signed [31:0] operand_t;$/;"	T	package:instr_register_pkg
read_index	instr_register.sv	/^    input index_t read_index,$/;"	p	module:instr_register
reset_en	instr_register.sv	/^    input logic reset_en,$/;"	p	module:instr_register
write_index	instr_register.sv	/^    input index_t write_index,$/;"	p	module:instr_register

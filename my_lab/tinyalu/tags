!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Fortran	E,enum	/enumerations/
!_TAG_KIND_DESCRIPTION!Fortran	M,method	/type bound procedures/
!_TAG_KIND_DESCRIPTION!Fortran	N,enumerator	/enumeration values/
!_TAG_KIND_DESCRIPTION!Fortran	S,submodule	/submodules/
!_TAG_KIND_DESCRIPTION!Fortran	b,blockData	/block data/
!_TAG_KIND_DESCRIPTION!Fortran	c,common	/common blocks/
!_TAG_KIND_DESCRIPTION!Fortran	e,entry	/entry points/
!_TAG_KIND_DESCRIPTION!Fortran	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Fortran	i,interface	/interface contents, generic names, and operators/
!_TAG_KIND_DESCRIPTION!Fortran	k,component	/type and structure components/
!_TAG_KIND_DESCRIPTION!Fortran	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Fortran	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Fortran	n,namelist	/namelists/
!_TAG_KIND_DESCRIPTION!Fortran	p,program	/programs/
!_TAG_KIND_DESCRIPTION!Fortran	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!Fortran	t,type	/derived types and structures/
!_TAG_KIND_DESCRIPTION!Fortran	v,variable	/program (global) and module variables/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!SystemVerilog	A,assert	/assertions (assert, assume, cover, restrict)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	C,class	/classes/
!_TAG_KIND_DESCRIPTION!SystemVerilog	E,enum	/enumerators/
!_TAG_KIND_DESCRIPTION!SystemVerilog	H,checker	/checkers/
!_TAG_KIND_DESCRIPTION!SystemVerilog	I,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!SystemVerilog	K,package	/packages/
!_TAG_KIND_DESCRIPTION!SystemVerilog	L,clocking	/clocking/
!_TAG_KIND_DESCRIPTION!SystemVerilog	M,modport	/modports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	N,nettype	/nettype declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	O,constraint	/constraints/
!_TAG_KIND_DESCRIPTION!SystemVerilog	P,program	/programs/
!_TAG_KIND_DESCRIPTION!SystemVerilog	R,property	/properties/
!_TAG_KIND_DESCRIPTION!SystemVerilog	S,struct	/structs and unions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	T,typedef	/type declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	V,covergroup	/covergroups/
!_TAG_KIND_DESCRIPTION!SystemVerilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	c,constant	/constants (parameter, specparam, enum values)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!SystemVerilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!SystemVerilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	i,instance	/instances of module or interface/
!_TAG_KIND_DESCRIPTION!SystemVerilog	l,ifclass	/interface class/
!_TAG_KIND_DESCRIPTION!SystemVerilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!SystemVerilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	q,sequence	/sequences/
!_TAG_KIND_DESCRIPTION!SystemVerilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!SystemVerilog	w,member	/struct and union members/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Fortran	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!SystemVerilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/u/risheek/SystemVerilog/my_lab/tinyalu/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240922.0/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!SystemVerilog!module	decl	/declaring instances/
A	tb_basic.sv	/^  (output operand_t A,$/;"	p	module:tb_basic
A	tinyalu.sv	/^  (input operand_t A,$/;"	p	module:tinyalu
A	top.sv	/^  operand_t A;$/;"	r	module:top
ADD	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
AND	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
B	tb_basic.sv	/^    output operand_t B,$/;"	p	module:tb_basic
B	tinyalu.sv	/^    input operand_t B,$/;"	p	module:tinyalu
B	top.sv	/^  operand_t B;$/;"	r	module:top
DUT	top.sv	/^  tinyalu DUT(.*);$/;"	i	module:top	typeref:module:tinyalu
INC	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
MUL	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
NOP	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
NOT	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
SUB	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
TEST	top.sv	/^  tb_basic TEST(.*);$/;"	i	module:top	typeref:module:tb_basic
XOR	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	c	typedef:alu_pkg.opcode_t
alu_pkg	alu_pkg.sv	/^package alu_pkg;$/;"	K
check_transaction	tb_basic.sv	/^    task check_transaction;$/;"	t	module:tb_basic
clk	tb_basic.sv	/^    input logic clk,$/;"	p	module:tb_basic
clk	tinyalu.sv	/^    input logic clk,$/;"	p	module:tinyalu
clk	top.sv	/^  logic clk;$/;"	r	module:top
compile	makefile	/^compile:$/;"	t
done	tb_basic.sv	/^    input logic done); $/;"	p	module:tb_basic
done	tinyalu.sv	/^    output logic done); $/;"	p	module:tinyalu
done	top.sv	/^  logic done; $/;"	r	module:top
expect_q	tb_basic.sv	/^  opcode_t expect_q[$];$/;"	r	module:tb_basic
generate_transaction	tb_basic.sv	/^    task generate_transaction;$/;"	t	module:tb_basic
opcode	tb_basic.sv	/^    output opcode_t opcode,$/;"	p	module:tb_basic
opcode	tinyalu.sv	/^    input opcode_t opcode,$/;"	p	module:tinyalu
opcode	top.sv	/^  opcode_t opcode;$/;"	r	module:top
opcode_t	alu_pkg.sv	/^  typedef enum logic [2:0] {NOP=3'b000,ADD=3'b001,SUB=3'b010,NOT=3'b011,XOR=3'b100,AND=3'b101,MU/;"	T	package:alu_pkg
operand_t	alu_pkg.sv	/^  typedef logic [7:0] operand_t;$/;"	T	package:alu_pkg
opt	makefile	/^opt:$/;"	t
reset_n	tb_basic.sv	/^    output logic reset_n,$/;"	p	module:tb_basic
reset_n	tinyalu.sv	/^    input logic reset_n,$/;"	p	module:tinyalu
reset_n	top.sv	/^  logic reset_n;$/;"	r	module:top
result	tb_basic.sv	/^    input result_t result,$/;"	p	module:tb_basic
result	tinyalu.sv	/^    output result_t result,$/;"	p	module:tinyalu
result	top.sv	/^  result_t result;$/;"	r	module:top
result_expected	tb_basic.sv	/^  result_t result_expected;$/;"	r	module:tb_basic
result_t	alu_pkg.sv	/^  typedef logic [15:0] result_t;$/;"	T	package:alu_pkg
send_transaction	tb_basic.sv	/^    task send_transaction;$/;"	t	module:tb_basic
sim	makefile	/^sim:$/;"	t
start	tb_basic.sv	/^    output logic start,$/;"	p	module:tb_basic
start	tinyalu.sv	/^    input logic start,$/;"	p	module:tinyalu
start	top.sv	/^  logic start;$/;"	r	module:top
tb_basic	tb_basic.sv	/^module tb_basic$/;"	m
tinyalu	tinyalu.sv	/^module tinyalu$/;"	m
top	top.sv	/^module top;$/;"	m

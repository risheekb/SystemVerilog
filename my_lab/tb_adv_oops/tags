!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Fortran	E,enum	/enumerations/
!_TAG_KIND_DESCRIPTION!Fortran	M,method	/type bound procedures/
!_TAG_KIND_DESCRIPTION!Fortran	N,enumerator	/enumeration values/
!_TAG_KIND_DESCRIPTION!Fortran	S,submodule	/submodules/
!_TAG_KIND_DESCRIPTION!Fortran	b,blockData	/block data/
!_TAG_KIND_DESCRIPTION!Fortran	c,common	/common blocks/
!_TAG_KIND_DESCRIPTION!Fortran	e,entry	/entry points/
!_TAG_KIND_DESCRIPTION!Fortran	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Fortran	i,interface	/interface contents, generic names, and operators/
!_TAG_KIND_DESCRIPTION!Fortran	k,component	/type and structure components/
!_TAG_KIND_DESCRIPTION!Fortran	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Fortran	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Fortran	n,namelist	/namelists/
!_TAG_KIND_DESCRIPTION!Fortran	p,program	/programs/
!_TAG_KIND_DESCRIPTION!Fortran	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!Fortran	t,type	/derived types and structures/
!_TAG_KIND_DESCRIPTION!Fortran	v,variable	/program (global) and module variables/
!_TAG_KIND_DESCRIPTION!SystemVerilog	A,assert	/assertions (assert, assume, cover, restrict)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	C,class	/classes/
!_TAG_KIND_DESCRIPTION!SystemVerilog	E,enum	/enumerators/
!_TAG_KIND_DESCRIPTION!SystemVerilog	H,checker	/checkers/
!_TAG_KIND_DESCRIPTION!SystemVerilog	I,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!SystemVerilog	K,package	/packages/
!_TAG_KIND_DESCRIPTION!SystemVerilog	L,clocking	/clocking/
!_TAG_KIND_DESCRIPTION!SystemVerilog	M,modport	/modports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	N,nettype	/nettype declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	O,constraint	/constraints/
!_TAG_KIND_DESCRIPTION!SystemVerilog	P,program	/programs/
!_TAG_KIND_DESCRIPTION!SystemVerilog	R,property	/properties/
!_TAG_KIND_DESCRIPTION!SystemVerilog	S,struct	/structs and unions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	T,typedef	/type declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	V,covergroup	/covergroups/
!_TAG_KIND_DESCRIPTION!SystemVerilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	c,constant	/constants (parameter, specparam, enum values)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!SystemVerilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!SystemVerilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	i,instance	/instances of module or interface/
!_TAG_KIND_DESCRIPTION!SystemVerilog	l,ifclass	/interface class/
!_TAG_KIND_DESCRIPTION!SystemVerilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!SystemVerilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	q,sequence	/sequences/
!_TAG_KIND_DESCRIPTION!SystemVerilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!SystemVerilog	w,member	/struct and union members/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Fortran	1.1	/current.age/
!_TAG_PARSER_VERSION!SystemVerilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/u/risheek/SystemVerilog/my_lab/tb_adv_oops/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240922.0/
!_TAG_ROLE_DESCRIPTION!SystemVerilog!module	decl	/declaring instances/
ADD	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
BaseTest	classes/basetest.svh	/^class BaseTest;$/;"	C
DEPTH	instr_register_pkg.sv	/^  parameter DEPTH = 8;$/;"	c	package:instr_register_pkg
DIV	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
DUT	top.sv	/^  instr_register DUT(.clk(clk),.io(io));$/;"	i	module:top	typeref:module:instr_register
Div0Test	classes/div0test.svh	/^class Div0Test extends BaseTest;$/;"	C
DivideBy0	classes/divideby0.svh	/^class DivideBy0 extends Transaction;$/;"	C
Driver	classes/driver.svh	/^class Driver;$/;"	C
Generator	classes/generator.svh	/^class Generator;$/;"	C
IRW	instr_register.sv	/^  instruction_t IRW [DEPTH-1:0];$/;"	r	module:instr_register
MOD	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
MUL	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
Monitor	classes/monitor.svh	/^class Monitor;$/;"	C
PASSA	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
PASSB	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
SUB	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
Scoreboard	classes/scoreboard.svh	/^class Scoreboard;$/;"	C
Transaction	classes/transaction.svh	/^class Transaction;$/;"	C
WIDTH	instr_register_pkg.sv	/^  parameter WIDTH = $clog2(DEPTH);$/;"	c	package:instr_register_pkg
ZERO	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	c	typedef:instr_register_pkg.opcode_t
add_input	classes/scoreboard.svh	/^  function void add_input(Transaction trans_h);$/;"	f	class:Scoreboard
blueprint_h	classes/generator.svh	/^  Transaction blueprint_h;$/;"	r	class:Generator
build	classes/basetest.svh	/^  virtual task build();$/;"	t	class:BaseTest
build	classes/generator.svh	/^  virtual task build();$/;"	t	class:Generator
check	classes/basetest.svh	/^  virtual task check(int n);$/;"	t	class:BaseTest
check	classes/generator.svh	/^  virtual task check(int n);$/;"	t	class:Generator
check	classes/monitor.svh	/^  task check(int n);$/;"	t	class:Monitor
check_output	classes/scoreboard.svh	/^  function void check_output(instruction_t instr_word,index_t read_index);$/;"	f	class:Scoreboard
clk	instr_register.sv	/^  (input logic clk,instr_register_inf io);$/;"	p	module:instr_register
clk	instr_register_inf.sv	/^  (input logic clk);$/;"	p	interface:instr_register_inf
clk	top.sv	/^  logic clk;$/;"	r	module:top
clone	classes/divideby0.svh	/^  virtual function Transaction clone();$/;"	f	class:DivideBy0
clone	classes/transaction.svh	/^  virtual function Transaction clone();$/;"	f	class:Transaction
copy	classes/transaction.svh	/^  virtual function void copy(Transaction rhs_h);$/;"	f	class:Transaction
drv_h	classes/basetest.svh	/^  Driver drv_h;$/;"	r	class:BaseTest
drv_h	classes/generator.svh	/^  Driver drv_h;$/;"	r	class:Generator
drv_h	classes/generator.svh	/^  function new(Driver drv_h);$/;"	p	function:Generator.new
expect_a	classes/scoreboard.svh	/^  instruction_t expect_a[index_t];$/;"	r	class:Scoreboard
gen_h	classes/basetest.svh	/^  Generator gen_h;$/;"	r	class:BaseTest
index	classes/driver.svh	/^  task send_check(index_t index); \/\/starting a read transaction$/;"	p	task:Driver.send_check
index	classes/transaction.svh	/^  index_t index;$/;"	r	class:Transaction
index_q	classes/generator.svh	/^  index_t index_q[$];$/;"	r	class:Generator
index_t	instr_register_pkg.sv	/^  typedef logic [WIDTH-1:0] index_t;$/;"	T	package:instr_register_pkg
instr_register	instr_register.sv	/^module instr_register $/;"	m
instr_register_inf	instr_register_inf.sv	/^interface instr_register_inf$/;"	I
instr_register_pkg	instr_register_pkg.sv	/^package instr_register_pkg;$/;"	K
instr_register_test	instr_register_test.sv	/^module instr_register_test$/;"	m
instr_register_test	instr_register_test_pkg.sv	/^package instr_register_test;$/;"	K
instr_word	classes/scoreboard.svh	/^  function void check_output(instruction_t instr_word,index_t read_index);$/;"	p	function:Scoreboard.check_output
instruction	instr_register_inf.sv	/^  instruction_t instruction;$/;"	r	interface:instr_register_inf
instruction_t	instr_register_pkg.sv	/^  }instruction_t;$/;"	T	package:instr_register_pkg
io	classes/div0test.svh	/^  function new(virtual instr_register_inf io);$/;"	p	function:Div0Test.new
io	classes/driver.svh	/^  function new(virtual instr_register_inf io);$/;"	p	function:Driver.new
io	instr_register.sv	/^  (input logic clk,instr_register_inf io);$/;"	p	module:instr_register
io	instr_register_test.sv	/^  (instr_register_inf io); $/;"	p	module:instr_register_test
io	instr_register_test_pkg.sv	/^  task run_test(virtual instr_register_inf io);$/;"	p	task:instr_register_test.run_test
io	top.sv	/^  instr_register_inf io(clk); $/;"	i	module:top	typeref:module:instr_register_inf
load_en	instr_register_inf.sv	/^  logic load_en;$/;"	r	interface:instr_register_inf
mon_h	classes/basetest.svh	/^  Monitor mon_h;$/;"	r	class:BaseTest
n	classes/basetest.svh	/^  virtual task check(int n);$/;"	p	task:BaseTest.check
n	classes/basetest.svh	/^  virtual task run(int n);$/;"	p	task:BaseTest.run
n	classes/div0test.svh	/^  virtual task run(int n);$/;"	p	task:Div0Test.run
n	classes/generator.svh	/^  virtual task check(int n);$/;"	p	task:Generator.check
n	classes/generator.svh	/^  virtual task run(int n);$/;"	p	task:Generator.run
n	classes/monitor.svh	/^  task check(int n);$/;"	p	task:Monitor.check
n	classes/monitor.svh	/^  task run(int n);$/;"	p	task:Monitor.run
new	classes/basetest.svh	/^  function new(virtual instr_register_inf v_io);$/;"	f	class:BaseTest
new	classes/div0test.svh	/^  function new(virtual instr_register_inf io);$/;"	f	class:Div0Test
new	classes/driver.svh	/^  function new(virtual instr_register_inf io);$/;"	f	class:Driver
new	classes/generator.svh	/^  function new(Driver drv_h);$/;"	f	class:Generator
new	classes/monitor.svh	/^  function new(virtual instr_register_inf v_io,Scoreboard scbd_h);$/;"	f	class:Monitor
op_a	instr_register_pkg.sv	/^    operand_t op_a;$/;"	w	typedef:instr_register_pkg.instruction_t
op_b	instr_register_pkg.sv	/^    operand_t op_b;$/;"	w	typedef:instr_register_pkg.instruction_t
opc	instr_register_pkg.sv	/^    opcode_t opc;$/;"	w	typedef:instr_register_pkg.instruction_t
opcode	classes/transaction.svh	/^  opcode_t opcode;$/;"	r	class:Transaction
opcode	instr_register_inf.sv	/^  opcode_t opcode;$/;"	r	interface:instr_register_inf
opcode_t	instr_register_pkg.sv	/^  typedef enum logic [2:0] { ZERO,PASSA,PASSB,ADD,SUB,DIV,MUL,MOD} opcode_t;$/;"	T	package:instr_register_pkg
operand_a	classes/transaction.svh	/^  operand_t operand_a, operand_b;$/;"	r	class:Transaction
operand_a	instr_register_inf.sv	/^  operand_t operand_a;$/;"	r	interface:instr_register_inf
operand_b	classes/transaction.svh	/^  operand_t operand_a, operand_b;$/;"	r	class:Transaction
operand_b	instr_register_inf.sv	/^  operand_t operand_b;$/;"	r	interface:instr_register_inf
operand_t	instr_register_pkg.sv	/^  typedef bit signed [31:0] operand_t;$/;"	T	package:instr_register_pkg
print_transaction	classes/divideby0.svh	/^  virtual function void print_transaction();$/;"	f	class:DivideBy0
print_transaction	classes/transaction.svh	/^  virtual function void print_transaction();$/;"	f	class:Transaction
que	instr_register_test.sv	/^  instruction_t que[$];$/;"	r	module:instr_register_test
randomize_transaction	classes/divideby0.svh	/^  virtual function void randomize_transaction();$/;"	f	class:DivideBy0
randomize_transaction	classes/transaction.svh	/^  virtual function void randomize_transaction();$/;"	f	class:Transaction
read_index	classes/scoreboard.svh	/^  function void check_output(instruction_t instr_word,index_t read_index);$/;"	p	function:Scoreboard.check_output
read_index	instr_register_inf.sv	/^  index_t read_index;$/;"	r	interface:instr_register_inf
read_transaction	instr_register_test.sv	/^   task  read_transaction();$/;"	t	module:instr_register_test
report	classes/basetest.svh	/^  virtual task report();$/;"	t	class:BaseTest
reset	classes/basetest.svh	/^  virtual task reset();$/;"	t	class:BaseTest
reset	classes/driver.svh	/^  task reset();$/;"	t	class:Driver
reset_en	instr_register_inf.sv	/^  logic reset_en;$/;"	r	interface:instr_register_inf
rhs_h	classes/transaction.svh	/^  virtual function void copy(Transaction rhs_h);$/;"	p	function:Transaction.copy
run	classes/basetest.svh	/^  virtual task run(int n);$/;"	t	class:BaseTest
run	classes/div0test.svh	/^  virtual task run(int n);$/;"	t	class:Div0Test
run	classes/generator.svh	/^  virtual task run(int n);$/;"	t	class:Generator
run	classes/monitor.svh	/^  task run(int n);$/;"	t	class:Monitor
run_test	instr_register_test_pkg.sv	/^  task run_test(virtual instr_register_inf io);$/;"	t	package:instr_register_test
scbd_h	classes/basetest.svh	/^  Scoreboard scbd_h;$/;"	r	class:BaseTest
scbd_h	classes/monitor.svh	/^  Scoreboard scbd_h;$/;"	r	class:Monitor
scbd_h	classes/monitor.svh	/^  function new(virtual instr_register_inf v_io,Scoreboard scbd_h);$/;"	p	function:Monitor.new
send	classes/driver.svh	/^  task send(Transaction trans_h);$/;"	t	class:Driver
send	classes/generator.svh	/^  virtual task send(Transaction trans_h);$/;"	t	class:Generator
send_check	classes/driver.svh	/^  task send_check(index_t index); \/\/starting a read transaction$/;"	t	class:Driver
send_transaction	instr_register_test.sv	/^   task send_transaction();$/;"	t	module:instr_register_test
test_h	instr_register_test_pkg.sv	/^  BaseTest test_h;$/;"	r	package:instr_register_test
test_name	instr_register_test_pkg.sv	/^    string test_name;$/;"	r	task:instr_register_test.run_test
top	top.sv	/^module top;$/;"	m
tr	instr_register_test.sv	/^  instruction_t tr;$/;"	r	module:instr_register_test
trans_h	classes/driver.svh	/^  task send(Transaction trans_h);$/;"	p	task:Driver.send
trans_h	classes/generator.svh	/^    Transaction trans_h;$/;"	r	task:Generator.run
trans_h	classes/generator.svh	/^  virtual task send(Transaction trans_h);$/;"	p	task:Generator.send
trans_h	classes/monitor.svh	/^    Transaction trans_h;$/;"	r	task:Monitor.run
trans_h	classes/scoreboard.svh	/^  function void add_input(Transaction trans_h);$/;"	p	function:Scoreboard.add_input
trans_h	instr_register_test.sv	/^  Transaction trans_h;$/;"	r	module:instr_register_test
v_io	classes/basetest.svh	/^  function new(virtual instr_register_inf v_io);$/;"	p	function:BaseTest.new
v_io	classes/basetest.svh	/^  virtual instr_register_inf v_io;$/;"	r	class:BaseTest
v_io	classes/driver.svh	/^  virtual instr_register_inf v_io;$/;"	r	class:Driver
v_io	classes/monitor.svh	/^  function new(virtual instr_register_inf v_io,Scoreboard scbd_h);$/;"	p	function:Monitor.new
v_io	classes/monitor.svh	/^  virtual instr_register_inf v_io;$/;"	r	class:Monitor
write_index	instr_register_inf.sv	/^  index_t write_index;$/;"	r	interface:instr_register_inf

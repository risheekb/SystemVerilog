!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Fortran	E,enum	/enumerations/
!_TAG_KIND_DESCRIPTION!Fortran	M,method	/type bound procedures/
!_TAG_KIND_DESCRIPTION!Fortran	N,enumerator	/enumeration values/
!_TAG_KIND_DESCRIPTION!Fortran	S,submodule	/submodules/
!_TAG_KIND_DESCRIPTION!Fortran	b,blockData	/block data/
!_TAG_KIND_DESCRIPTION!Fortran	c,common	/common blocks/
!_TAG_KIND_DESCRIPTION!Fortran	e,entry	/entry points/
!_TAG_KIND_DESCRIPTION!Fortran	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Fortran	i,interface	/interface contents, generic names, and operators/
!_TAG_KIND_DESCRIPTION!Fortran	k,component	/type and structure components/
!_TAG_KIND_DESCRIPTION!Fortran	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Fortran	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Fortran	n,namelist	/namelists/
!_TAG_KIND_DESCRIPTION!Fortran	p,program	/programs/
!_TAG_KIND_DESCRIPTION!Fortran	s,subroutine	/subroutines/
!_TAG_KIND_DESCRIPTION!Fortran	t,type	/derived types and structures/
!_TAG_KIND_DESCRIPTION!Fortran	v,variable	/program (global) and module variables/
!_TAG_KIND_DESCRIPTION!SystemVerilog	A,assert	/assertions (assert, assume, cover, restrict)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	C,class	/classes/
!_TAG_KIND_DESCRIPTION!SystemVerilog	E,enum	/enumerators/
!_TAG_KIND_DESCRIPTION!SystemVerilog	H,checker	/checkers/
!_TAG_KIND_DESCRIPTION!SystemVerilog	I,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!SystemVerilog	K,package	/packages/
!_TAG_KIND_DESCRIPTION!SystemVerilog	L,clocking	/clocking/
!_TAG_KIND_DESCRIPTION!SystemVerilog	M,modport	/modports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	N,nettype	/nettype declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	O,constraint	/constraints/
!_TAG_KIND_DESCRIPTION!SystemVerilog	P,program	/programs/
!_TAG_KIND_DESCRIPTION!SystemVerilog	R,property	/properties/
!_TAG_KIND_DESCRIPTION!SystemVerilog	S,struct	/structs and unions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	T,typedef	/type declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	V,covergroup	/covergroups/
!_TAG_KIND_DESCRIPTION!SystemVerilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	c,constant	/constants (parameter, specparam, enum values)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!SystemVerilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!SystemVerilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	i,instance	/instances of module or interface/
!_TAG_KIND_DESCRIPTION!SystemVerilog	l,ifclass	/interface class/
!_TAG_KIND_DESCRIPTION!SystemVerilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!SystemVerilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	q,sequence	/sequences/
!_TAG_KIND_DESCRIPTION!SystemVerilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!SystemVerilog	w,member	/struct and union members/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Fortran	1.1	/current.age/
!_TAG_PARSER_VERSION!SystemVerilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/u/risheek/SystemVerilog/my_lab/single_port_ram/adv_oops_tb/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/p6.1.20240922.0/
!_TAG_ROLE_DESCRIPTION!SystemVerilog!module	decl	/declaring instances/
ADDR_WIDTH	ram_pkg.sv	/^  parameter ADDR_WIDTH = $clog2(DEPTH);$/;"	c	package:ram_pkg
BaseTest	classes/basetest.svh	/^class BaseTest;$/;"	C
Component	classes/component.svh	/^class Component;$/;"	C
DATA_WIDTH	ram_pkg.sv	/^  parameter DATA_WIDTH = 32;$/;"	c	package:ram_pkg
DEPTH	ram_pkg.sv	/^  parameter DEPTH = 4;$/;"	c	package:ram_pkg
DUT	top.sv	/^  DualPortRam DUT(.inf(inf));$/;"	i	module:top	typeref:module:DualPortRam
Driver	classes/driver.svh	/^class Driver extends Component;$/;"	C
DualPortRam	dual_port_ram.sv	/^module DualPortRam$/;"	m
Generator	classes/generator.svh	/^class Generator extends Component;$/;"	C
MEM	dual_port_ram.sv	/^  logic [DATA_WIDTH-1:0] MEM [DEPTH];$/;"	r	module:DualPortRam
Monitor	classes/monitor.svh	/^class Monitor extends Component;$/;"	C
Scoreboard	classes/scoreboard.svh	/^class Scoreboard extends Component;$/;"	C
Transaction	classes/transaction.svh	/^class Transaction;$/;"	C
add_input	classes/scoreboard.svh	/^  function void add_input(Transaction trans);$/;"	f	class:Scoreboard
addr	classes/driver.svh	/^  virtual task send_check(address_t addr); \/\/read the data$/;"	p	task:Driver.send_check
addr	classes/scoreboard.svh	/^  function void check_output(data_t data,address_t addr);$/;"	p	function:Scoreboard.check_output
addr	classes/transaction.svh	/^  address_t addr;$/;"	r	class:Transaction
addr	ram_interface.sv	/^  address_t addr;$/;"	r	interface:ram_interface
addr_q	classes/generator.svh	/^  address_t addr_q[$];$/;"	r	class:Generator
address_t	ram_pkg.sv	/^  typedef logic [ADDR_WIDTH-1:0] address_t;$/;"	T	package:ram_pkg
build	classes/component.svh	/^  virtual task build();$/;"	t	class:Component
check	classes/basetest.svh	/^  task check(int n);$/;"	t	class:BaseTest
check	classes/component.svh	/^  virtual task check(int n);$/;"	t	task:Component.build.reset.run
check	classes/generator.svh	/^  virtual task check(int n);$/;"	t	class:Generator
check	classes/monitor.svh	/^  virtual task check(int n);$/;"	t	class:Monitor
check_output	classes/scoreboard.svh	/^  function void check_output(data_t data,address_t addr);$/;"	f	class:Scoreboard
clk	ram_interface.sv	/^  (input logic clk);$/;"	p	interface:ram_interface
clk	top.sv	/^  logic clk;$/;"	r	module:top
copy	classes/transaction.svh	/^  function void copy(Transaction rhs);$/;"	f	class:Transaction
cs	ram_interface.sv	/^  logic cs;$/;"	r	interface:ram_interface
data	classes/scoreboard.svh	/^  function void check_output(data_t data,address_t addr);$/;"	p	function:Scoreboard.check_output
data_in	classes/transaction.svh	/^  data_t data_in;$/;"	r	class:Transaction
data_in	ram_interface.sv	/^  data_t data_in;$/;"	r	interface:ram_interface
data_out	ram_interface.sv	/^  data_t data_out;$/;"	r	interface:ram_interface
data_t	ram_pkg.sv	/^  typedef logic [DATA_WIDTH-1:0] data_t;$/;"	T	package:ram_pkg
drv_h	classes/basetest.svh	/^  Driver drv_h;$/;"	r	class:BaseTest
drv_h	classes/generator.svh	/^  Driver drv_h;$/;"	r	class:Generator
drv_h	classes/generator.svh	/^  function new(Driver drv_h);$/;"	p	function:Generator.new
expect_a	classes/scoreboard.svh	/^  data_t expect_a[address_t];$/;"	r	class:Scoreboard
gen_h	classes/basetest.svh	/^  Generator gen_h;$/;"	r	class:BaseTest
inf	dual_port_ram.sv	/^  (ram_interface inf);$/;"	p	module:DualPortRam
inf	tb_basic.sv	/^  (ram_interface inf);$/;"	p	module:tb_basic
inf	top.sv	/^  ram_interface inf(.*);$/;"	i	module:top	typeref:module:ram_interface
mon_h	classes/basetest.svh	/^  Monitor mon_h;$/;"	r	class:BaseTest
n	classes/basetest.svh	/^  task check(int n);$/;"	p	task:BaseTest.check
n	classes/basetest.svh	/^  task run(int n);$/;"	p	task:BaseTest.run
n	classes/component.svh	/^  virtual task check(int n);$/;"	p	task:Component.build.reset.run.check
n	classes/component.svh	/^  virtual task run(int n);$/;"	p	task:Component.build.reset.run
n	classes/generator.svh	/^  virtual task check(int n);$/;"	p	task:Generator.check
n	classes/generator.svh	/^  virtual task run(int n);$/;"	p	task:Generator.run
n	classes/monitor.svh	/^  virtual task check(int n);$/;"	p	task:Monitor.check
n	classes/monitor.svh	/^  virtual task run(int n);$/;"	p	task:Monitor.run
n	ram_test_pkg.sv	/^  int n = DEPTH;$/;"	r	package:ram_test_pkg
new	classes/basetest.svh	/^  function new(virtual ram_interface vif);$/;"	f	class:BaseTest
new	classes/driver.svh	/^  function new(virtual ram_interface vif);$/;"	f	class:Driver
new	classes/generator.svh	/^  function new(Driver drv_h);$/;"	f	class:Generator
new	classes/monitor.svh	/^  function new(virtual ram_interface vif,Scoreboard scbd_h);$/;"	f	class:Monitor
oe	ram_interface.sv	/^  logic oe;$/;"	r	interface:ram_interface
print_transaction	classes/transaction.svh	/^  function void print_transaction();$/;"	f	class:Transaction
ram_interface	ram_interface.sv	/^interface ram_interface$/;"	I
ram_pkg	ram_pkg.sv	/^package ram_pkg;$/;"	K
ram_test_pkg	ram_test_pkg.sv	/^package ram_test_pkg;$/;"	K
randomize_send	tb_basic.sv	/^  task randomize_send();$/;"	t	module:tb_basic
randomize_transaction	classes/transaction.svh	/^  function void randomize_transaction();$/;"	f	class:Transaction
read	tb_basic.sv	/^  task read();$/;"	t	module:tb_basic
report	classes/component.svh	/^  virtual task report();$/;"	t	task:Component.build.reset.run.check
reset	classes/component.svh	/^  virtual task reset();$/;"	t	task:Component.build
rhs	classes/transaction.svh	/^  function void copy(Transaction rhs);$/;"	p	function:Transaction.copy
run	classes/basetest.svh	/^  task run(int n);$/;"	t	class:BaseTest
run	classes/component.svh	/^  virtual task run(int n);$/;"	t	task:Component.build.reset
run	classes/driver.svh	/^  virtual task run(Transaction trans); \/\/write the data into memory$/;"	t	class:Driver
run	classes/generator.svh	/^  virtual task run(int n);$/;"	t	class:Generator
run	classes/monitor.svh	/^  virtual task run(int n);$/;"	t	class:Monitor
run_test	ram_test_pkg.sv	/^  task run_test(virtual ram_interface vif);$/;"	t	package:ram_test_pkg
scbd_h	classes/basetest.svh	/^  Scoreboard scbd_h;$/;"	r	class:BaseTest
scbd_h	classes/monitor.svh	/^  Scoreboard scbd_h;$/;"	r	class:Monitor
scbd_h	classes/monitor.svh	/^  function new(virtual ram_interface vif,Scoreboard scbd_h);$/;"	p	function:Monitor.new
send	classes/generator.svh	/^  task send(Transaction trans);$/;"	t	class:Generator
send_check	classes/driver.svh	/^  virtual task send_check(address_t addr); \/\/read the data$/;"	t	class:Driver
tb_basic	tb_basic.sv	/^module tb_basic$/;"	m
test_h	ram_test_pkg.sv	/^  BaseTest test_h;$/;"	r	package:ram_test_pkg
top	top.sv	/^module top;$/;"	m
trans	classes/driver.svh	/^  virtual task run(Transaction trans); \/\/write the data into memory$/;"	p	task:Driver.run
trans	classes/generator.svh	/^    Transaction trans;$/;"	r	task:Generator.run
trans	classes/generator.svh	/^  task send(Transaction trans);$/;"	p	task:Generator.send
trans	classes/monitor.svh	/^  Transaction trans;$/;"	r	class:Monitor
trans	classes/scoreboard.svh	/^  function void add_input(Transaction trans);$/;"	p	function:Scoreboard.add_input
trans	tb_basic.sv	/^    Transaction trans;$/;"	r	task:tb_basic.randomize_send
trans	tb_basic.sv	/^  task write(Transaction trans);$/;"	p	task:tb_basic.write
vif	classes/basetest.svh	/^  function new(virtual ram_interface vif);$/;"	p	function:BaseTest.new
vif	classes/basetest.svh	/^  virtual ram_interface vif;$/;"	r	class:BaseTest
vif	classes/driver.svh	/^  function new(virtual ram_interface vif);$/;"	p	function:Driver.new
vif	classes/driver.svh	/^  virtual ram_interface vif;$/;"	r	class:Driver
vif	classes/monitor.svh	/^  function new(virtual ram_interface vif,Scoreboard scbd_h);$/;"	p	function:Monitor.new
vif	classes/monitor.svh	/^  virtual ram_interface vif;$/;"	r	class:Monitor
vif	ram_test_pkg.sv	/^  task run_test(virtual ram_interface vif);$/;"	p	task:ram_test_pkg.run_test
we	ram_interface.sv	/^  logic we;$/;"	r	interface:ram_interface
write	tb_basic.sv	/^  task write(Transaction trans);$/;"	t	module:tb_basic

var g_data = {"name":"../rtl/sync_fifo.v","src":"module fifo #(parameter DEPTH = 8, parameter WIDTH=32)(\n  input clk,\n  input clear,\n  input write,\n  input read,\n  input reset,\n  input [WIDTH-1:0] data_in,\n  output full,\n  output almost_full,\n  output empty,\n  output almost_empty,\n  output reg [$clog2(DEPTH):0] cnt,\n  output reg [WIDTH-1:0] data_out);\n\n\n  reg [WIDTH-1:0] memory [0:DEPTH-1]; //memory declaration. \n  reg [$clog2(DEPTH)-1:0] write_pointer ; //write_pointer for writing into the memory.\n  reg [$clog2(DEPTH)-1:0] read_pointer ; //read_pointer for reading from the memory.\n  \n  reg [$clog2(DEPTH):0] i; //loop variable \n  assign full = (cnt == DEPTH); //asserting full flag when count is equal to FIFO DEPTH.\n  assign empty = (cnt == 0); //asserting the empty flag when there is no element in the FIFO.\n  assign almost_full = (cnt == (DEPTH -1)); //asserting almost_full when count is equal to one less than DEPTH.\n  assign almost_empty = (cnt == 1); //asserting almost_empty when there is only one element in the FIFO.\n\n\n  always @(posedge clk or posedge reset) begin //asynchronous active high reset signal.\n    if(reset || clear) begin\n      write_pointer <= 0;\n      read_pointer <= 0;\n      data_out <= 0;\n      cnt <= 0;\n      //reset memory contents\n      for(i = 0 ; i < DEPTH;i=i+1) begin\n          memory[i] <= '0;\n      end\n    end\n    else begin\n      if(write && !read && !full) begin\n        cnt <= cnt + 1'b1;\n        memory[write_pointer] <= data_in;\n        write_pointer <= write_pointer + 1'b1;\n      end\n      if(read && !write && !empty) begin\n        cnt <= cnt - 1'b1;\n        data_out <= memory[read_pointer];\n        read_pointer <= read_pointer + 1'b1;\n      end\n    end\n  end\n\nendmodule: fifo\n","lang":"verilog"};
processSrcData(g_data);